git 命令

git add <file -name>
git commit -m "注释"

git status  //查看文件状态
git diff    //查看文件修改情况 工作区与缓存区或版本库进行比较
git diff HEAD -- <file -name>  //查看具体的文件工作区与最新版本库的区别

git log     //查看提交日志
git log --pretty=oneline  //简化版的提交日志
git reflog   //记录每一次命令的日志

git reset --hard HEAD^  //回退到上一个版本
git reset --hard HEAD~3 //回退到上三个版本gi
git reset --hard <commit id>  //根据版本Id回退到对应的版本

git checkout -- <file -name>  //撤销使工作区的修改和版本库或暂存区的一致
git reset HEAD <file -name>   //清空暂存区的修改和版本库一致

git rm <file -name>  //删除一个文件 错删恢复同撤销修改操作

git remote add origin https://github.com/xyzlee/myGitRepository.git  //关联一个远程库
git push -u origin master  //第一次推送master分支的所有内容
git push origin master  //推送最新版本

git clone git@github.com:xyzlee/myGitRepository.git     //从远程库克隆一份到本地

git branch  //查看分支
git branch  <name>  //创建分支
git checkout <name> //切换分支
git checkout -b <name> //创建并切换分支
git merge <name> //合并某分支到当前分支
git branch -d <name> //删除分支

git log --graph --pretty=oneline --abbrev-commit //查看分支历史
git merge --no-ff -m "merge with no-ff" dev //禁用fast forward 模式合并，生成一个新的版本

分支策略

在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

git stash   //将当前分支没有commit的内容存储起来，包括未add的和已经add的
git stash list //查看存储情况
git stash apply  //恢复存储内容
git stash drop  //删除存储内容
git stash pop  //恢复同时删除存储


查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。










